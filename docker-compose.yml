version: '3.8'

services:
  # قاعدة البيانات PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: deliverymatch-db
    environment:
      POSTGRES_DB: deliverymatch
      POSTGRES_USER: deliverymatch_user
      POSTGRES_PASSWORD: deliverymatch_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - deliverymatch-network
    restart: unless-stopped

  # Backend Spring Boot
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: deliverymatch-backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/deliverymatch
      SPRING_DATASOURCE_USERNAME: deliverymatch_user
      SPRING_DATASOURCE_PASSWORD: deliverymatch_password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_PROFILES_ACTIVE: docker
      JWT_SECRET: your-super-secret-jwt-key-here
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - deliverymatch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Angular
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: deliverymatch-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - deliverymatch-network
    restart: unless-stopped

  # Redis للتخزين المؤقت (اختياري)
  redis:
    image: redis:7-alpine
    container_name: deliverymatch-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - deliverymatch-network
    restart: unless-stopped

  # Nginx كـ reverse proxy (اختياري)
  nginx:
    image: nginx:alpine
    container_name: deliverymatch-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - deliverymatch-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  deliverymatch-network:
    driver: bridge 